datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  categoryCreated Category[] @relation(name: "Category.createdUserId")
  categoryUpdated Category[] @relation(name: "Category.updatedUserId")

  groupCreated Group[] @relation(name: "Group.createdUserId")
  groupUpdated Group[] @relation(name: "Group.updatedUserId")

  permissionCreated Permission[] @relation(name: "Permission.createdUserId")
  permissionUpdated Permission[] @relation(name: "Permission.updatedUserId")

  groupMemberCreated GroupMember[] @relation(name: "GroupMember.createdUserId")
  groupMemberUpdated GroupMember[] @relation(name: "GroupMember.updatedUserId")

  newsCreated   News[] @relation(name: "News.createdUserId")
  newsRevised   News[] @relation(name: "News.revisedUserId")
  newsAppproved News[] @relation(name: "News.approvedUserId")

  meetCreated   Meet[] @relation(name: "Meet.createdUserId")
  meetRevised   Meet[] @relation(name: "Meet.revisedUserId")
  meetAppproved Meet[] @relation(name: "Meet.approvedUserId")

  liveCreated Live[] @relation(name: "Live.createdUserId")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupMember GroupMember[] @relation(name: "GroupMember.userId")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id            String   @id @default(cuid())
  name          String
  link          String
  order         Int
  role          Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdUserId String
  updatedUserId String?
  createdUser   User     @relation(name: "Category.createdUserId", fields: [createdUserId], references: [id])
  updatedUser   User?    @relation(name: "Category.updatedUserId", fields: [updatedUserId], references: [id])

  permission Permission[] @relation(name: "Permission.categoryId")
}

model Group {
  id            String   @id @default(cuid())
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdUserId String
  updatedUserId String?
  createdUser   User     @relation(name: "Group.createdUserId", fields: [createdUserId], references: [id])
  updatedUser   User?    @relation(name: "Group.updatedUserId", fields: [updatedUserId], references: [id])

  permission  Permission[]  @relation(name: "Permission.groupId")
  groupMember GroupMember[] @relation(name: "GroupMember.groupId")
}

model Permission {
  groupId       String
  categoryId    String
  view          Boolean  @default(false)
  submit        Boolean  @default(false)
  revise        Boolean  @default(false)
  exclude       Boolean  @default(false)
  approve       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdUserId String
  updatedUserId String?
  createdUser   User     @relation(name: "Permission.createdUserId", fields: [createdUserId], references: [id])
  updatedUser   User?    @relation(name: "Permission.updatedUserId", fields: [updatedUserId], references: [id])

  group    Group    @relation(name: "Permission.groupId", fields: [groupId], references: [id], onDelete: Cascade)
  category Category @relation(name: "Permission.categoryId", fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([groupId, categoryId])
}

model GroupMember {
  groupId       String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdUserId String
  updatedUserId String?
  createdUser   User     @relation(name: "GroupMember.createdUserId", fields: [createdUserId], references: [id])
  updatedUser   User?    @relation(name: "GroupMember.updatedUserId", fields: [updatedUserId], references: [id])

  group Group @relation(name: "GroupMember.groupId", fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(name: "GroupMember.userId", fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupId, userId])
}

model News {
  id             String    @id @default(cuid())
  title          String
  detail         String
  image          String?
  fromDate       DateTime  @default(now())
  toDate         DateTime?
  linkCategory   Int?
  linkString     String?
  order          Int
  createdUserId  String
  revisedUserId  String?
  approvedUserId String?
  approved       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  revisedAt      DateTime  @updatedAt
  approvedAt     DateTime?
  createdUser    User      @relation(name: "News.createdUserId", fields: [createdUserId], references: [id])
  revisedUser    User?     @relation(name: "News.revisedUserId", fields: [revisedUserId], references: [id])
  approvedUser   User?     @relation(name: "News.approvedUserId", fields: [approvedUserId], references: [id])
}

model Meet {
  id             String    @id @default(cuid())
  code           String?
  kind           Int
  title          String
  fromDate       DateTime  @default(now())
  toDate         DateTime?
  deadline       DateTime?
  place          String
  poolsize       Int
  result         Boolean   @default(false)
  description    String?
  detail         String?
  attachment     String?
  createdUserId  String
  revisedUserId  String?
  approvedUserId String?
  approved       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  revisedAt      DateTime  @updatedAt
  approvedAt     DateTime?
  createdUser    User      @relation(name: "Meet.createdUserId", fields: [createdUserId], references: [id])
  revisedUser    User?     @relation(name: "Meet.revisedUserId", fields: [revisedUserId], references: [id])
  approvedUser   User?     @relation(name: "Meet.approvedUserId", fields: [approvedUserId], references: [id])

  live Live[] @relation(name: "Live.meetId")
}

model Live {
  id            String   @id @default(cuid())
  title         String
  fromDate      DateTime @default(now())
  meetId        String?
  onAir         Boolean  @default(false)
  url           String?
  order         Int
  finished      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdUserId String

  meet        Meet? @relation(name: "Live.meetId", fields: [meetId], references: [id])
  createdUser User  @relation(name: "Live.createdUserId", fields: [createdUserId], references: [id])
}
